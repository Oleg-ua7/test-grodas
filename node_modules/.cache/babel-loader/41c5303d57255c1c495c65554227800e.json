{"ast":null,"code":"var _jsxFileName = \"/home/oleg/\\u0421\\u0442\\u0456\\u043B\\u044C\\u043D\\u0438\\u0446\\u044F/Test-Work-Grodas-master/src/index.js\";\nimport React from \"react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createRoot } from \"react-dom/client\"; // FIRST PART OF THE TEST WORK\n// React 18 Render API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst container = document.getElementById(\"app\");\nconst root = createRoot(container);\nroot.render( /*#__PURE__*/_jsxDEV(App, {\n  tab: \"home\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 13\n}, this)); // SECOND PART OF TEST WORK\n// 1. Визначити загальну кількість елементів у DOM-дереві.\n\nlet dom_list = document.getElementsByTagName(\"*\");\nconsole.log(dom_list.length); // 2. Сгрупувати елементи за назвою тегу, визначити кількість елементів для кожного тегу.\n\nlet uniqueTagNameSet = new Set(Array.prototype.slice.call(dom_list).map(i => i.tagName)); //get all unique tag names used in app\n\nlet uniqueTagNameArr = Array.from(uniqueTagNameSet).map(i => i.toLowerCase()); // convert Set to map and put tag names to lower case\n\nlet groupedByTagName = []; // initialize \"store\" for grouped elements by tag name\n\nconst getElement = tag_name => {\n  return Array.prototype.slice.call(document.getElementsByTagName(tag_name));\n}; // create func to automate getting elements by tag name\n\n\nfor (let i = 0; i < uniqueTagNameArr.length; i++) {\n  groupedByTagName.push(getElement(uniqueTagNameArr[i]));\n} // get and group elements by tag name\n\n\nconsole.log(groupedByTagName); // show grouped elements\n\nfor (let i of groupedByTagName) {\n  console.log(i, i.length);\n} // show the number of items for each tag\n// 3. Сгрупувати елементи за кількістю символів у назві тегу, визначити кількість елементів\n\n\nconst getTagLength = (dom_arr, length) => {\n  return Array.prototype.slice.call(dom_arr).map(i => i.tagName).filter(i => i.length === length);\n}; // create func to get all elements up to max length tag in app\n\n\nconst maxLengthOfTagName = Math.max.apply(null, Array.prototype.slice.call(dom_list).map(i => i.tagName.length)); // get element with max name length\n\nlet groupedByCharsQuantity = []; // initialize \"store\" for grouped elements by name length\n\nfor (let i = 0; i <= maxLengthOfTagName; i++) {\n  groupedByCharsQuantity.push(getTagLength(dom_list, i));\n} // get and group elements by name length\n\n\nconsole.log(groupedByCharsQuantity.filter(i => i.length > 0), groupedByCharsQuantity.length); // show results","map":{"version":3,"sources":["/home/oleg/Стільниця/Test-Work-Grodas-master/src/index.js"],"names":["React","App","createRoot","container","document","getElementById","root","render","dom_list","getElementsByTagName","console","log","length","uniqueTagNameSet","Set","Array","prototype","slice","call","map","i","tagName","uniqueTagNameArr","from","toLowerCase","groupedByTagName","getElement","tag_name","push","getTagLength","dom_arr","filter","maxLengthOfTagName","Math","max","apply","groupedByCharsQuantity"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CAEA;AAEA;;;AAEA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAlB;AACA,MAAMC,IAAI,GAAGJ,UAAU,CAACC,SAAD,CAAvB;AACAG,IAAI,CAACC,MAAL,eAAY,QAAC,GAAD;AAAK,EAAA,GAAG,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,QAAZ,E,CAEA;AAEA;;AACA,IAAIC,QAAQ,GAAGJ,QAAQ,CAACK,oBAAT,CAA8B,GAA9B,CAAf;AACAC,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,MAArB,E,CAEA;;AACA,IAAIC,gBAAgB,GAAG,IAAIC,GAAJ,CACrBC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BV,QAA3B,EAAqCW,GAArC,CAA0CC,CAAD,IAAOA,CAAC,CAACC,OAAlD,CADqB,CAAvB,C,CAEG;;AACH,IAAIC,gBAAgB,GAAGP,KAAK,CAACQ,IAAN,CAAWV,gBAAX,EAA6BM,GAA7B,CAAkCC,CAAD,IAAOA,CAAC,CAACI,WAAF,EAAxC,CAAvB,C,CAAiF;;AACjF,IAAIC,gBAAgB,GAAG,EAAvB,C,CAA2B;;AAC3B,MAAMC,UAAU,GAAIC,QAAD,IAAc;AAC/B,SAAOZ,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2Bd,QAAQ,CAACK,oBAAT,CAA8BkB,QAA9B,CAA3B,CAAP;AACD,CAFD,C,CAEG;;;AAEH,KAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,gBAAgB,CAACV,MAArC,EAA6CQ,CAAC,EAA9C,EAAkD;AAChDK,EAAAA,gBAAgB,CAACG,IAAjB,CAAsBF,UAAU,CAACJ,gBAAgB,CAACF,CAAD,CAAjB,CAAhC;AACD,C,CAAC;;;AAEFV,OAAO,CAACC,GAAR,CAAYc,gBAAZ,E,CAA+B;;AAC/B,KAAK,IAAIL,CAAT,IAAcK,gBAAd,EAAgC;AAC9Bf,EAAAA,OAAO,CAACC,GAAR,CAAYS,CAAZ,EAAeA,CAAC,CAACR,MAAjB;AACD,C,CAAC;AAEF;;;AACA,MAAMiB,YAAY,GAAG,CAACC,OAAD,EAAUlB,MAAV,KAAqB;AACxC,SAAOG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CACJC,IADI,CACCY,OADD,EAEJX,GAFI,CAECC,CAAD,IAAOA,CAAC,CAACC,OAFT,EAGJU,MAHI,CAGIX,CAAD,IAAOA,CAAC,CAACR,MAAF,KAAaA,MAHvB,CAAP;AAID,CALD,C,CAKG;;;AACH,MAAMoB,kBAAkB,GAAGC,IAAI,CAACC,GAAL,CAASC,KAAT,CACzB,IADyB,EAEzBpB,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BV,QAA3B,EAAqCW,GAArC,CAA0CC,CAAD,IAAOA,CAAC,CAACC,OAAF,CAAUT,MAA1D,CAFyB,CAA3B,C,CAGG;;AAEH,IAAIwB,sBAAsB,GAAG,EAA7B,C,CAAiC;;AAEjC,KAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIY,kBAArB,EAAyCZ,CAAC,EAA1C,EAA8C;AAC5CgB,EAAAA,sBAAsB,CAACR,IAAvB,CAA4BC,YAAY,CAACrB,QAAD,EAAWY,CAAX,CAAxC;AACD,C,CAAC;;;AAEFV,OAAO,CAACC,GAAR,CACEyB,sBAAsB,CAACL,MAAvB,CAA+BX,CAAD,IAAOA,CAAC,CAACR,MAAF,GAAW,CAAhD,CADF,EAEEwB,sBAAsB,CAACxB,MAFzB,E,CAGG","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createRoot } from \"react-dom/client\";\n\n// FIRST PART OF THE TEST WORK\n\n// React 18 Render API\n\nconst container = document.getElementById(\"app\");\nconst root = createRoot(container);\nroot.render(<App tab=\"home\" />);\n\n// SECOND PART OF TEST WORK\n\n// 1. Визначити загальну кількість елементів у DOM-дереві.\nlet dom_list = document.getElementsByTagName(\"*\");\nconsole.log(dom_list.length);\n\n// 2. Сгрупувати елементи за назвою тегу, визначити кількість елементів для кожного тегу.\nlet uniqueTagNameSet = new Set(\n  Array.prototype.slice.call(dom_list).map((i) => i.tagName)\n); //get all unique tag names used in app\nlet uniqueTagNameArr = Array.from(uniqueTagNameSet).map((i) => i.toLowerCase()); // convert Set to map and put tag names to lower case\nlet groupedByTagName = []; // initialize \"store\" for grouped elements by tag name\nconst getElement = (tag_name) => {\n  return Array.prototype.slice.call(document.getElementsByTagName(tag_name));\n}; // create func to automate getting elements by tag name\n\nfor (let i = 0; i < uniqueTagNameArr.length; i++) {\n  groupedByTagName.push(getElement(uniqueTagNameArr[i]));\n} // get and group elements by tag name\n\nconsole.log(groupedByTagName); // show grouped elements\nfor (let i of groupedByTagName) {\n  console.log(i, i.length);\n} // show the number of items for each tag\n\n// 3. Сгрупувати елементи за кількістю символів у назві тегу, визначити кількість елементів\nconst getTagLength = (dom_arr, length) => {\n  return Array.prototype.slice\n    .call(dom_arr)\n    .map((i) => i.tagName)\n    .filter((i) => i.length === length);\n}; // create func to get all elements up to max length tag in app\nconst maxLengthOfTagName = Math.max.apply(\n  null,\n  Array.prototype.slice.call(dom_list).map((i) => i.tagName.length)\n); // get element with max name length\n\nlet groupedByCharsQuantity = []; // initialize \"store\" for grouped elements by name length\n\nfor (let i = 0; i <= maxLengthOfTagName; i++) {\n  groupedByCharsQuantity.push(getTagLength(dom_list, i));\n} // get and group elements by name length\n\nconsole.log(\n  groupedByCharsQuantity.filter((i) => i.length > 0),\n  groupedByCharsQuantity.length\n); // show results\n"]},"metadata":{},"sourceType":"module"}